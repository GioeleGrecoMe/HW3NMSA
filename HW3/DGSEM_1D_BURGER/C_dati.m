%=======================================================================================================
% This contain all the information for running main
% TEMPLATE OF THE STRUCT DATI
%=======================================================================================================
% Dati structure for the solution of the Burger's equation 
%
% u_t + f(u)_x = 0  in [a,b]
%
% where f(u) = 1/2 u^2
% + Dirichlet or Periodic boundary condition
% + initial condition u_0
% P0 finite elements + Runge-Kutta 2

function [Dati]=C_dati(test)

if test=='Test1'
Dati = struct( 'name',             test,...
        ... % Test name
        'domain',           [0 10],...
        ... % Domain bounds
        'bc',           'D',...
        ... % boundary conditions 'P' = periodic, 'D' = Dirichlet inflow boundary
        'c2',             '1+0.*x', ...
        .... %Stabilization parameter
        'T',               3, ...
        ... % Final time ...
        'dt',            0.01, ...
        ... % Time step
        'Burger',            1, ...
        ... % 0 - linear case     flux(u) = c2*u 
        ... % 1 - non linear case flux(u) = 0.5*c2*u^2
        'u0',      'exp(-(x-3).^2)', ...
        ... % Initial condition u
        'exact_sol',       '0.*x.*t',...
        ... % Definition of exact solution
        'grad_exact',     '0.*x.*t',...
        ... % du/dx
        'force',           '0.*x.*t',...
        ... % Forcing term
        'neumann1',     '0*t',...
        ... % c2du/dx(0,t)
        'neumann2',     '0*t',...
        ... % c2du/dx(L,t)
        'fem',              'P0',...
        ... % P1-fe
        'nqn_1D',            2,...
        ... % Number of quad. points per element
        'MeshType',         'TS', ...
        ... % uniform regular mesh
        'refinement_vector', [4,5,6,7],...
        ... % Refinement levels for  the error analysis
        'visual_graph',      'Y',...
        ... % Visualization of the solution
        'plot_errors',       'Y' ...
        ...% Compute Errors
        );
    

end



